type: install
name: Filebeat
id: filebeat-multiple

logo: https://iconape.com/wp-content/png_logo_vector/elastic-beats.png
description:
  short: 'Filebeat: lightweight shipper for forwarding and centralizing log data'
  text: |
    Filebeat is a lightweight shipper for forwarding and centralizing log data.
    Installed as an agent on your servers, Filebeat monitors the log files or locations that you specify, collects log events, and forwards them either to [Elasticsearch](https://www.elastic.co/products/elasticsearch) or [Logstash](https://www.elastic.co/products/logstash) for indexing.

baseUrl: https://raw.githubusercontent.com/SlavaKatiukha/jelastic-filebeat-addon/main

settings:
  fields:
    - type: string
      name: elasticsearchHost
      caption: Elasticsearch Host
      placeholder: 0.0.0.0:9200
      required: true

    - type: string
      name: kibanaHost
      caption: Kibana Host
      placeholder: 0.0.0.0:5601
      required: true

    - type: compositefield
      caption: Credentials (optional)
      defaultMargins: 0 10 0 0
      items:
        - type: string
          name: elasticsearchUser
          placeholder: User
          width: 200

        - type: displayfield
          cls: x-form-item-label
          value: Password
          width: 60

        - type: string
          name: elasticsearchPassword
          inputType: password
          width: 163
          
    - type: spacer

    - type: list
      name: envName
      caption: Environment
      required: true
      values: []

    - type: radiolist
      caption: Nodes
      name: mode
      columns: 3
      value: allNodeGroups
      values:
        - caption: All Nodes
          value: allNodeGroups

        - caption: Specific Nodes
          value: specificNodeGroups
      showIf:
        specificNodeGroups:
          - type: list
            name: nodeGroups
            required: true
            multiSelect: true
            dependsOn:
              envName: {}


onBeforeInit: |
  var resp = jelastic.env.control.GetEnvs();
  if (resp.result !== 0) return resp;
  var envs = [];
  var nodes = {};

  for (var i = 0, envInfo, env; envInfo = resp.infos[i]; i++) {
    env = envInfo.env;

    if (env.status == 1) {
      for (var j = 0, node; node = envInfo.nodes[j]; j++) {
        nodes[env.envName] = nodes[env.envName] || [];
        nodes[env.envName].groups = nodes[env.envName].groups || {};

        if (!nodes[env.envName].groups[node.nodeGroup])
          nodes[env.envName].push({
            value: node.nodeGroup,
            caption: (node.displayName || node.name) + ' (' + node.nodeGroup + ')'
          });

        nodes[env.envName].groups[node.nodeGroup] = true;
      }

      if (nodes[env.envName] && nodes[env.envName].length > 0) {
        envs.push({
          value: env.envName,
          caption: (env.displayName || env.envName)
        });
      }
    }
  }

  if (envs.length > 0) {
    jps.settings.fields[4].values = envs;
    jps.settings.fields[4].value = envs[0].value;
    jps.settings.fields[5].showIf.specificNodeGroups[0].dependsOn.envName = nodes;
  }

  return { result: 0, settings: jps.settings };

onInstall:
  - if ('${settings.mode}' == 'specificNodeGroups'):
      set: { nodeGroups: '${settings.nodeGroups}' }
  - else:
      - env.control.GetEnvInfo:
          envName: ${settings.envName}
      - set: { nodeGroups: '${response.nodeGroups.join(name,)}' }

  - install [${this.nodeGroups}]:
      envName: ${settings.envName}
      settings:
        elasticsearchHost: ${settings.elasticsearchHost}
        kibanaHost: ${settings.kibanaHost}
        elasticsearchUser: ${settings.elasticsearchUser}
        elasticsearchPassword: ${settings.elasticsearchPassword}
      jps: manifest.jps
        
